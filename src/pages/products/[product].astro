---
import Layout from "../../layouts/Layout.astro";
import products from "../../data/products.json";

// Define getStaticPaths to generate static pages for each product
export async function getStaticPaths() {
  return products.map((product) => ({
    params: { product: product.id }, // The dynamic segment (e.g., "dark-brown")
    props: { productData: product }, // Pass product data as props
  }));
}

// Access the product data passed from getStaticPaths
const { productData } = Astro.props;
---

<Layout>
  <section class="py-20">
    <div class="container mx-auto px-6 grid grid-cols-1 md:grid-cols-2 gap-10">
      <!-- Sticky Image Gallery -->
      <div class="md:sticky top-20 h-fit">
        <img
          src={productData.image}
          alt={productData.name}
          class="w-full rounded-xl shadow-lg"
          id="mainImage"
        />
        <div class="flex justify-center mt-4 space-x-4">
          {
            productData.images.map((img) => (
              <img
                src={img}
                class="w-20 h-20 object-cover rounded-lg cursor-pointer border-2 border-transparent hover:border-yellow-500 transition"
                onclick="changeImage(this.src)"
                alt="Product Thumbnail"
              />
            ))
          }
        </div>
      </div>

      <!-- Product Details -->
      <div
        class="bg-gradient-to-br from-yellow-50 to-yellow-200 p-8 rounded-xl shadow-lg"
      >
        <h1 class="text-4xl font-extrabold text-yellow-900">
          {productData.name}
        </h1>
        <div class="flex items-center mt-3">
          <span class="text-3xl font-bold text-yellow-700"
            >₹{productData.price}</span
          >
          <span
            class="ml-3 px-4 py-1 text-sm font-medium bg-green-100 text-green-700 rounded-full"
          >
            ✅ In Stock
          </span>
        </div>
        <p class="mt-4 text-lg text-gray-700 leading-relaxed">
          {productData.description}
        </p>

        <!-- Quantity & Add to Cart -->
        <div
          class="mt-6 flex flex-col md:flex-row items-center md:space-x-4 space-y-4 md:space-y-0 w-full"
        >
          <!-- Quantity Selector -->
          <div
            class="border border-yellow-400 rounded-full bg-yellow-50 px-4 py-2 flex items-center"
          >
            <label for="quantity" class="mr-2 font-semibold text-yellow-900"
              >Qty:</label
            >
            <select
              id="quantity"
              class="bg-transparent text-lg text-yellow-900 outline-none"
            >
              {[1, 2, 3, 4, 5].map((num) => <option value={num}>{num}</option>)}
            </select>
          </div>

          <!-- Add to Cart Button -->
          <button
            id="addToCartButton"
            data-product={JSON.stringify(productData)}
            class="bg-yellow-600 hover:bg-yellow-700 text-white text-lg px-6 py-3 rounded-full shadow-lg hover:scale-105 transition-all w-full md:w-auto"
          >
            🛒 Add to Cart
          </button>

          <!-- Cart Message (Hidden by Default) -->
          <div
            id="cartMessage"
            class="hidden bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg"
          >
            ✅ Added to cart!
          </div>
        </div>

        <!-- Additional Information -->
        <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          {
            [
              {
                title: "Ingredients",
                icon: "🌿",
                info: productData.ingredients,
              },
              { title: "Sourcing", icon: "🏡", info: productData.sourcing },
              {
                title: "Certifications",
                icon: "✅",
                info: productData.certifications.join(", "),
              },
              { title: "Shelf Life", icon: "📅", info: productData.shelf_life },
            ].map((item) => (
              <div class="flex items-center bg-white p-4 rounded-lg shadow-md">
                <span class="text-2xl mr-3">{item.icon}</span>
                <div class="">
                  <h3 class="text-lg font-bold text-yellow-900 ">
                    {item.title}
                  </h3>
                  <p class="text-gray-700">{item.info}</p>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Health Benefits -->
        <div class="mt-8">
          <h3 class="text-xl font-bold text-yellow-900">Health Benefits</h3>
          <ul class="list-disc list-inside text-gray-700 mt-2">
            {
              productData.health_benefits.map((benefit) => (
                <li>✅ {benefit}</li>
              ))
            }
          </ul>
        </div>

        <!-- Recommended Uses Section -->
        <div
          class="mt-12 bg-yellow-50 p-8 rounded-2xl shadow-lg border-l-8 border-yellow-500"
        >
          <h3 class="text-2xl font-bold text-yellow-900 text-center">
            ✨ How to Use Jaggery
          </h3>

          <!-- Uses Carousel -->
          <div
            id="usesCarousel"
            class="mt-6 flex overflow-x-auto space-x-4 p-4 snap-x scrollbar-hide"
          >
            {
              productData.recommended_uses.map((use) => (
                <div class="min-w-[250px] bg-white shadow-md rounded-xl p-6 flex flex-col items-center text-center snap-center">
                  <div class="text-5xl">{use.emoji}</div>
                  <h4 class="text-lg font-semibold text-yellow-900 mt-4">
                    {use.text}
                  </h4>
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>

    <!-- Related Products Section -->
    <div class="mt-16 mx-4">
      <h2 class="text-2xl font-bold text-yellow-900 text-center md:text-left">
        Related Products
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
        {
          products
            .filter((p) => p.id !== productData.id) // Exclude the current product
            .slice(0, 2) // Show only 2 related products
            .map((product) => (
              <div class="bg-white p-6 rounded-2xl shadow-md hover:shadow-2xl transition-all duration-500 ease-in-out transform hover:-translate-y-2 hover:scale-105 flex flex-col">
                <div class="w-full h-64 overflow-hidden rounded-xl">
                  <img
                    src={product.image}
                    alt={product.name}
                    class="w-full h-full object-cover transition-transform duration-500 ease-in-out hover:scale-110"
                  />
                </div>

                <div class="flex flex-col flex-grow justify-between mt-5">
                  <div>
                    <h3 class="text-2xl font-bold text-yellow-900">
                      {product.name}
                    </h3>
                    <p class="mt-3 text-yellow-700 text-sm leading-relaxed">
                      {product.description}
                    </p>
                  </div>

                  <a
                    href={`/products/${product.id}`}
                    class="mt-5 bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-6 py-3 rounded-lg transition-all duration-500 ease-in-out transform hover:scale-105 text-center"
                  >
                    Buy Now
                  </a>
                </div>
              </div>
            ))
        }
      </div>
    </div>
  </section>
</Layout>

<!-- Client-side Script for "Add to Cart" -->
<!-- @ts-ignore -->
<script client:load is:inline>
  function changeImage(src) {
    document.getElementById("mainImage").src = src;
  }

  document.addEventListener("DOMContentLoaded", () => {
    const addToCartButton = document.getElementById("addToCartButton");
    const quantitySelect = document.getElementById("quantity");

    if (!addToCartButton) {
      console.error("Add to Cart button not found");
      return;
    }
    if (!quantitySelect) {
      console.error("Quantity select element not found");
      return;
    }

    // Parse the product data from the button's data attribute
    const productDataStr = addToCartButton.getAttribute("data-product");
    if (!productDataStr) {
      console.error("Product data attribute not found");
      return;
    }
    let productData;
    try {
      productData = JSON.parse(productDataStr);
    } catch (error) {
      console.error("Error parsing product data:", error);
      return;
    }

    addToCartButton.addEventListener("click", () => {
      console.log("Add to Cart button clicked");
      const quantity = parseInt(quantitySelect.value, 10);
      if (isNaN(quantity)) {
        console.error("Invalid quantity");
        return;
      }
      // Retrieve existing cart from localStorage or initialize an empty array
      const cart = JSON.parse(localStorage.getItem("cart")) || [];

      // Check if the product is already in the cart
      const existingProductIndex = cart.findIndex(
        (item) => item.id === productData.id
      );

      if (existingProductIndex !== -1) {
        // Update quantity if product already exists
        cart[existingProductIndex].quantity += quantity;
      } else {
        // Add new product to cart
        cart.push({
          id: productData.id,
          name: productData.name,
          price: productData.price,
          image: productData.image,
          quantity: quantity,
        });
      }
      // Save updated cart to localStorage
      localStorage.setItem("cart", JSON.stringify(cart));
      console.log("Updated cart:", cart);

      const cartMessage = document.getElementById("cartMessage");
      cartMessage.classList.remove("hidden");

      // Hide Message After 1 Second
      setTimeout(() => {
        cartMessage.classList.add("hidden");
      }, 2000);

      // Update the cart count (if applicable)
      function updateCartCount() {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const totalQuantity = cart.reduce(
          (sum, item) => sum + (item.quantity || 0),
          0
        );
        const cartCountEl = document.getElementById("cartCount");
        if (cartCountEl) {
          cartCountEl.innerText = totalQuantity;
        }
      }
      updateCartCount();
      window.addEventListener("storage", updateCartCount);
    });
  });
</script>
